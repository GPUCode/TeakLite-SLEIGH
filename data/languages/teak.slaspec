# sleigh specification file for TeakLite

define endian=little;
define alignment=2;

define space RAM    type=ram_space    size=2     wordsize=2      default;
define space register type=register_space size=4;

# 40bit accumulators
define register offset=0x0 size=5  [ a0 a1 b0 b1 ];
define bitrange a0l=a0[0,16]
                a0h=a0[16,16]
                a0e=a0[32,8]

                a1l=a1[0,16]
                a1h=a1[16,16]
                a1e=a1[32,8]

                b0l=b0[0,16]
                b0h=b0[16,16]
                b0e=b0[32,8]

                b1l=b1[0,16]
                b1h=b1[16,16]
                b1e=b1[32,8]
;

# GPR
define register offset=0x20 size=2  [ r0 r1 r2 r3 r4 r5 r6 r7 ];

# 32bit Multiply parms & results
define register offset=0x40 size=2  [ x0 y0 x1 y1 p0h ];
define register offset=0x50 size=4  [ p0 p1 ]; # todo: 33bit

# Misc
define register offset=0x60 size=3  [ pc ]; # todo: 18bit pc
define register offset=0x70 size=2  [ sp sv mixp lc repc dvm vtr0 vtr1 ];
define register offset=0x80 size=1  [ prpage ];

# User defined
define register offset=0x90 size=2  [ ext0 ext1 ext2 ext3 ];
# todo: shadow

# Control & status
#  TL
define register offset=0x100 size=2 [ st0 st1 st2 icr ];
#  TL II
define register offset=0x110 size=2 [ stt0 stt1 stt2 mod0 mod1 mod2 mod3 ];
#todo define bitrange ...

# Address conf
define register offset=0x120 size=2 [ ar0 ar1 arp0 arp1 arp2 arp3 ];
#todo define bitrange ...

define register offset=0x130 size=2 [ cfgi cfgj stepi0 stepj0 ];
#todo define bitrange ...

# TOKENS
define token teakop (16)
# Opcodes
    op_0000 = (0,0)
    op_0001 = (0,1)
    op_0002 = (0,2)
    op_0003 = (0,3)
    op_0004 = (0,4)
    op_0007 = (0,7)
    op_0009 = (0,9)
    op_0015 = (0,15)
    op_0101 = (1,1)
    op_0104 = (1,4)
    op_0105 = (1,5)
    op_0107 = (1,7)
    op_0109 = (1,9)
    op_0115 = (1,15)
    op_0202 = (2,2)
    op_0203 = (2,3)
    op_0204 = (2,4)
    op_0205 = (2,5)
    op_0207 = (2,7)
    op_0209 = (2,9)
    op_0215 = (2,15)
    op_0303 = (3,3)
    op_0304 = (3,4)
    op_0307 = (3,7)
    op_0309 = (3,9)
    op_0315 = (3,15)
    op_0404 = (4,4)
    op_0405 = (4,5)
    op_0407 = (4,7)
    op_0411 = (4,11)
    op_0415 = (4,15)
    op_0505 = (5,5)
    op_0507 = (5,7)
    op_0508 = (5,8)
    op_0515 = (5,15)
    op_0606 = (6,6)
    op_0607 = (6,7)
    op_0615 = (6,15)
    op_0707 = (7,7)
    op_0708 = (7,8)
    op_0709 = (7,9)
    op_0711 = (7,11)
    op_0715 = (7,15)
    op_0808 = (8,8)
    op_0809 = (8,9)
    op_0810 = (8,10)
    op_0811 = (8,11)
    op_0815 = (8,15)
    op_0909 = (9,9)
    op_0915 = (9,15)
    op_1015 = (10,15)
    op_1115 = (11,15)
    op_1215 = (12,15)
    op_1315 = (13,15)

# Operands
    Ab_0 = (0,1)
    Ab_10 = (10,11)
    Ab_11 = (11,12)
    Ab_2 = (2,3)
    Ab_3 = (3,4)
    Ab_4 = (4,5)
    Ab_5 = (5,6)
    Ab_6 = (6,7)
    Ab_7 = (7,8)
    Ab_8 = (8,9)
    Abe_0 = (0,1)
    Abe_1 = (1,2)
    Abh_2 = (2,3)
    Abh_4 = (4,5)
    Abh_8 = (8,9)
    Abl_0 = (0,1)
    Abl_10 = (10,11)
    Abl_3 = (3,4)
    Ablh_10 = (10,12)
    Ablh_9 = (9,11)
    Address18_2_0 = (0,1)
    Address18_2_4 = (4,5)
    Address18_2_5 = (5,6)
    Alb_0 = (0,2)
    Alb_9 = (9,11)
    Alm_9 = (9,12)
    Alu_0 = (0,2)
    Alu_9 = (9,11)
    ArArpSttMod_0 = (0,3)
    ArArpSttMod_8 = (8,11)
    ArArp_0 = (0,2)
    ArArp_8 = (8,10)
    ArRn1_1 = (1,1)
    ArRn1_3 = (3,3)
    ArRn1_4 = (4,4)
    ArRn1_8 = (8,8)
    ArRn2_0 = (0,1)
    ArRn2_10 = (10,11)
    ArRn2_2 = (2,3)
    ArRn2_3 = (3,4)
    ArRn2_4 = (4,5)
    ArRn2_7 = (7,8)
    ArRn2_8 = (8,9)
    ArStep1Alt_3 = (3,3)
    ArStep1_0 = (0,0)
    ArStep1_2 = (2,2)
    ArStep1_3 = (3,3)
    ArStep1_5 = (5,5)
    ArStep1_6 = (6,6)
    ArStep2_0 = (0,1)
    ArStep2_2 = (2,3)
    ArStep2_5 = (5,6)
    ArStep2_8 = (8,9)
    Ar_0 = (0,0)
    Ar_2 = (2,2)
    ArpRn1_0 = (0,0)
    ArpRn1_2 = (2,2)
    ArpRn1_3 = (3,3)
    ArpRn1_4 = (4,4)
    ArpRn1_5 = (5,5)
    ArpRn1_8 = (8,8)
    ArpRn1_9 = (9,9)
    ArpRn2_10 = (10,11)
    ArpRn2_4 = (4,5)
    ArpRn2_5 = (5,6)
    ArpRn2_8 = (8,9)
    ArpStep1_0 = (0,0)
    ArpStep1_1 = (1,1)
    ArpStep1_2 = (2,2)
    ArpStep1_3 = (3,3)
    ArpStep1_4 = (4,4)
    ArpStep1_8 = (8,8)
    ArpStep1_9 = (9,9)
    ArpStep2_0 = (0,1)
    ArpStep2_1 = (1,2)
    ArpStep2_2 = (2,3)
    ArpStep2_3 = (3,4)
    ArpStep2_5 = (5,6)
    Arp_0 = (0,1)
    Ax_0 = (0,0)
    Ax_1 = (1,1)
    Ax_10 = (10,10)
    Ax_11 = (11,11)
    Ax_12 = (12,12)
    Ax_3 = (3,3)
    Ax_4 = (4,4)
    Ax_5 = (5,5)
    Ax_6 = (6,6)
    Ax_8 = (8,8)
    Axh_0 = (0,0)
    Axh_12 = (12,12)
    Axh_4 = (4,4)
    Axh_6 = (6,6)
    Axh_8 = (8,8)
    Axh_9 = (9,9)
    Axl_0 = (0,0)
    Axl_12 = (12,12)
    Axl_4 = (4,4)
    Axl_5 = (5,5)
    Axl_8 = (8,8)
    BankFlags_0 = (0,5)
    Bx_0 = (0,0)
    Bx_1 = (1,1)
    Bx_10 = (10,10)
    Bx_12 = (12,12)
    Bx_2 = (2,2)
    Bx_3 = (3,3)
    Bx_4 = (4,4)
    Bx_5 = (5,5)
    Bx_8 = (8,8)
    Bxh_2 = (2,2)
    Bxh_5 = (5,5)
    Bxh_8 = (8,8)
    CbsCond_0 = (0,0)
    CbsCond_3 = (3,3)
    CbsCond_8 = (8,8)
    Cond_0 = (0,3)
    Imm2_0 = (0,1)
    Imm2_1 = (1,2)
    Imm4_0 = (0,3)
    Imm4_8 = (8,11)
    Imm5_0 = (0,4)
    Imm5s_0 = (0,4) signed
    Imm6s_0 = (0,5) signed
    Imm7s_0 = (0,6) signed
    Imm8_0 = (0,7)
    Imm8s_0 = (0,7) signed
    Imm9_0 = (0,8)
    MemImm8_0 = (0,7)
    MemR7Imm7s_0 = (0,6) signed
    Moda3_4 = (4,6)
    Moda4_4 = (4,7)
    Mul2_9 = (9,10)
    Mul3_1 = (1,3)
    Mul3_8 = (8,10)
    Px_0 = (0,0)
    Px_1 = (1,1)
    Px_4 = (4,4)
    R0123_0 = (0,1)
    R0123_5 = (5,6)
    R45_2 = (2,2)
    Register_0004 = (0,4)
    Register_0509 = (5,9)
    RelAddr7_4 = (4,10)
    RnOld_10 = (10,12)
    RnOld_9 = (9,11)
    Rn_0 = (0,2)
    StepZIDS_0 = (0,1)
    StepZIDS_3 = (3,4)
    StepZIDS_5 = (5,6)
    StepZIDS_7 = (7,8)
    SttMod_0 = (0,2)
    SttMod_8 = (8,10)
    SwapType_0003 = (0,3)
    Unused_0 = (0,0)
    Unused_1 = (1,1)
    Unused_10 = (10,10)
    Unused_2 = (2,2)
    Unused_5 = (5,5)

    Address16_16 = (0,15)
    Address18_16_16 = (0,15)
    Imm16_16 = (0,15)
    MemImm16_16 = (0,15)
    MemR7Imm16_16 = (0,15)
;

# VARIABLES
attach variables [ Ab_0 Ab_10 Ab_11 Ab_2 Ab_3 Ab_4 Ab_5 Ab_6 Ab_7 Ab_8 ] [ b0 b1 a0 a1 ];
attach variables [ Abe_0 Abe_1 ] [ b0e b1e a0e a1e ];
attach variables [ Abh_2 Abh_4 Abh_8 ] [ b0h b1h a0h a1h ];
attach variables [ Abl_0 Abl_10 Abl_3 ] [ b0l b1l a0l a1l ];
attach variables [ Ablh_10 Ablh_9 ] [ b0l b0h b1l b1h a0l a0h a1l a1h ];
# attach variables [ Address16_16 ]
# attach variables [ Address18_16_16 Address18_2_0 Address18_2_4 Address18_2_5 ]
# attach variables [ Alb_0 Alb_9 ]
# attach variables [ Alm_9 ]
# attach variables [ Alu_0 Alu_9 ]
attach variables [ ArArpSttMod_0 ArArpSttMod_8 ] [ ar0 ar1 arp0 arp1 arp2 arp3 _ _ stt0 stt1 stt2 _ mod0 mod1 mod2 mod3 ];
attach variables [ ArArp_0 ArArp_8 ] [ ar0 ar1 arp0 arp1 arp2 arp3 _ _ ];
# attach variables [ ArRn1_1 ArRn1_3 ArRn1_4 ArRn1_8 ]
# attach variables [ ArRn2_0 ArRn2_10 ArRn2_2 ArRn2_3 ArRn2_4 ArRn2_7 ArRn2_8 ]
# attach variables [ ArStep1Alt_3 ]
# attach variables [ ArStep1_0 ArStep1_2 ArStep1_3 ArStep1_5 ArStep1_6 ]
# attach variables [ ArStep2_0 ArStep2_2 ArStep2_5 ArStep2_8 ]
attach variables [ Ar_0 Ar_2 ] [ ar0 ar1 ];
# attach variables [ ArpRn1_0 ArpRn1_2 ArpRn1_3 ArpRn1_4 ArpRn1_5 ArpRn1_8 ArpRn1_9 ]
# attach variables [ ArpRn2_10 ArpRn2_4 ArpRn2_5 ArpRn2_8 ]
# attach variables [ ArpStep1_0 ArpStep1_1 ArpStep1_2 ArpStep1_3 ArpStep1_4 ArpStep1_8 ArpStep1_9 ]
# attach variables [ ArpStep2_0 ArpStep2_1 ArpStep2_2 ArpStep2_3 ArpStep2_5 ]
attach variables [ Arp_0 ] [ arp0 arp1 arp2 arp3 ];
attach variables [ Ax_0 Ax_1 Ax_10 Ax_11 Ax_12 Ax_3 Ax_4 Ax_5 Ax_6 Ax_8 ] [ a0 a1 ];
attach variables [ Axh_0 Axh_12 Axh_4 Axh_6 Axh_8 Axh_9 ] [ a0h a1h ];
attach variables [ Axl_0 Axl_12 Axl_4 Axl_5 Axl_8 ] [ a0l a1l ];
# attach variables [ BankFlags_0 ]
attach variables [ Bx_0 Bx_1 Bx_10 Bx_12 Bx_2 Bx_3 Bx_4 Bx_5 Bx_8 ] [ b0 b1 ];
attach variables [ Bxh_2 Bxh_5 Bxh_8 ] [ b0h b1h ];
# attach variables [ CbsCond_0 CbsCond_3 CbsCond_8 ]
# attach variables [ Cond_0 ]
# attach variables [ Imm16_16 ]
# attach variables [ Imm2_0 Imm2_1 ]
# attach variables [ Imm4_0 Imm4_8 ]
# attach variables [ Imm5_0 ]
# attach variables [ Imm5s_0 ]
# attach variables [ Imm6s_0 ]
# attach variables [ Imm7s_0 ]
# attach variables [ Imm8_0 ]
# attach variables [ Imm8s_0 ]
# attach variables [ Imm9_0 ]
# attach variables [ MemImm16_16 ]
# attach variables [ MemImm8_0 ]
# attach variables [ MemR7Imm16_16 ]
# attach variables [ MemR7Imm7s_0 ]
# attach variables [ Moda3_4 ]
# attach variables [ Moda4_4 ]
# attach variables [ Mul2_9 ]
# attach variables [ Mul3_1 Mul3_8 ]
attach variables [ Px_0 Px_1 Px_4 ] [ p0 p1 ];
attach variables [ R0123_0 R0123_5 ] [ r0 r1 r2 r3 ];
attach variables [ R45_2 ] [ r4 r5 ];
attach variables [ Register_0004 Register_0509 ] [ r0 r1 r2 r3 r4 r5 r7 y0
                                             st0 st1 st2
                                             p0h
                                             _ # todo: pc
                                             sp
                                             cfgi cfgj
                                             b0h b1h b0l b1l
                                             ext0 ext1 ext2 ext3
                                             _ _ # todo: a0 a1
                                             a0l a1l a0h a1h
                                             lc sv ];
# attach variables [ RelAddr7_4 ]
attach variables [ RnOld_10 RnOld_9 ] [ r0 r1 r2 r3 r4 r5 r7 y0 ];
attach variables [ Rn_0 ] [ r0 r1 r2 r3 r4 r5 r6 r7 ];
# attach variables [ StepZIDS_0 StepZIDS_3 StepZIDS_5 StepZIDS_7 ]
attach variables [ SttMod_0 SttMod_8 ] [ stt0 stt1 stt2 _ mod0 mod1 mod2 mod3 ];

Register_0: Register_0004    is Register_0004 { export Register_0004; }
Register_0: pc    is pc & Register_0004=0x0C { local tmp:2 = pc:2; export tmp; }
Register_0: a0    is a0 & Register_0004=0x18 {local tmp:2 = pc:2; export tmp;}
Register_0: a1    is a1 & Register_0004=0x19 {local tmp:2 = pc:2; export tmp;}

Register_5: Register_0509    is Register_0509 { export Register_0509; }
Register_5: pc    is pc & Register_0509=0x0C {local tmp:2 = pc:2; export tmp;}
Register_5: a0    is a0 & Register_0509=0x18 {local tmp:2 = pc:2; export tmp;}
Register_5: a1    is a1 & Register_0509=0x19 {local tmp:2 = pc:2; export tmp;}


Address18_16and0: Address18    is Address18_2_0 ; Address18_16_16
  [ Address18 = ((Address18_2_0<<16) | (Address18_16_16)); ]
{
  # don't export as an address, may be PIC code, and would add spurious symbols.
  export *[const]:4 Address18;
}

Address18_16and4: Address18    is Address18_2_4 ; Address18_16_16
  [ Address18 = ((Address18_2_4<<16) | (Address18_16_16)); ]
{
  # don't export as an address, may be PIC code, and would add spurious symbols.
  export *[const]:4 Address18;
}

Address18_16and5: Address18    is Address18_2_5 ; Address18_16_16
  [ Address18 = ((Address18_2_5<<16) | (Address18_16_16)); ]
{
  # don't export as an address, may be PIC code, and would add spurious symbols.
  export *[const]:4 Address18;
}

SwapType_0: (a0,b0)    is a0 & b0 & SwapType_0003=0x0
{
    local tmp:5 = a0;
    a0 = b0;
    b0 = tmp;
    # todo: update flags
}
SwapType_0: (a0,b1)    is a0 & b1 & SwapType_0003=0x1
{
    local tmp:5 = a0;
    a0 = b1;
    b1 = tmp;
    # todo: update flags
}
SwapType_0: (a1,b0)    is a1 & b0 & SwapType_0003=0x2
{
    local tmp:5 = a1;
    a1 = b0;
    b0 = tmp;
    # todo: update flags
}
SwapType_0: (a1,b1)    is a1 & b1 & SwapType_0003=0x3
{
    local tmp:5 = a1;
    a1 = b1;
    b1 = tmp;
    # todo: update flags
}
SwapType_0: (a0,b0),(a1,b1)    is a0 & b0 & a1 & b1 & SwapType_0003=0x4      
{
    local tmp:5 = a0;
    a0 = b0;
    b0 = tmp;
    tmp = a1;
    a1 = b1;
    b1 = tmp;
    # todo: update flags
}
SwapType_0: (a0,b1),(a1,b0)    is a0 & b1 & a1 & b0 & SwapType_0003=0x5      
{
    local tmp:5 = a0;
    a0 = b1;
    b1 = tmp;
    tmp = a1;
    a1 = b0;
    b0 = tmp;
    # todo: update flags
}
SwapType_0: (a0,b0,a1)    is a0 & b0 & a1 & SwapType_0003=0x6    
{
    local tmp:5 = a1;
    a1 = b0;
    b0 = a0;
    a0 = tmp;
    # todo: update flags
}
SwapType_0: (a0,b1,a1)    is a0 & b1 & a1 & SwapType_0003=0x7
{
    local tmp:5 = a1;
    a1 = b1;
    b1 = a0;
    a0 = tmp;
    # todo: update flags
}
SwapType_0: (a1,b0,a0)    is a1 & b0 & a0 & SwapType_0003=0x8
{
    local tmp:5 = a0;
    a0 = b0;
    b0 = a1;
    a1 = tmp;
    # todo: update flags
}
SwapType_0: (a1,b1,a0)    is a1 & b1 & a0 & SwapType_0003=0x9
{
    local tmp:5 = a0;
    a0 = b1;
    b1 = a1;
    a1 = tmp;
    # todo: update flags
}
SwapType_0: (b0,a0,b1)    is b0 & a0 & b1 & SwapType_0003=0xA
{
    local tmp:5 = b1;
    b1 = a0;
    a0 = b0;
    b0 = tmp;
    # todo: update flags
}
SwapType_0: (b0,a1,b1)    is b0 & a1 & b1 & SwapType_0003=0xB
{
    local tmp:5 = b1;
    b1 = a1;
    a1 = b0;
    b0 = tmp;
    # todo: update flags
}
SwapType_0: (b1,a0,b0)    is b1 & a0 & b0 & SwapType_0003=0xC
{
    local tmp:5 = b0;
    b0 = a0;
    a0 = b1;
    b1 = tmp;
    # todo: update flags
}
SwapType_0: (b1,a1,b0)    is b1 & a1 & b0 & SwapType_0003=0xD
{
    local tmp:5 = b0;
    b0 = a1;
    a1 = b1;
    b1 = tmp;
    # todo: update flags
}

@include "teak.sinc"