# using Alm = EnumOperand<AlmOp,
#     AlmOp::Or,
#     AlmOp::And,
#     AlmOp::Xor,
#     AlmOp::Add,
#     AlmOp::Tst0,
#     AlmOp::Tst1,
#     AlmOp::Cmp,
#     AlmOp::Sub,
#     AlmOp::Msu,
#     AlmOp::Addh,
#     AlmOp::Addl,
#     AlmOp::Subh,
#     AlmOp::Subl,
#     AlmOp::Sqr,
#     AlmOp::Sqra,
#     AlmOp::Cmpu
# >;
macro AlmGenericOr(a, Ax) 
{
    value:5 = a;

    value = value | Ax;
    SetAccAndFlag(Ax, value);
}
macro AlmGenericAnd(a, Ax) 
{
    value:5 = a;

    value = value & Ax;
    SetAccAndFlag(Ax, value);
}
macro AlmGenericXor(a, Ax) 
{
    value:5 = a;

    value = value ^ Ax;
    SetAccAndFlag(Ax, value);
}
macro AlmGenericAdd(a, Ax) 
{
    value:5 = a;
    V = scarry(value, Ax);
    VL = VL || V;
    Ax = value + Ax;
    SetAccFlag(Ax);
}
macro AlmGenericTst0(a, Ax) 
{
    value:2 = a;
    local tmp:2 = value & (Ax:2);
    Z = tmp == 0;
}
macro AlmGenericTst1(a, Ax) 
{
    value:2 = a;
    local tmp:2 = value & ~(Ax:2);
    Z = tmp == 0;
}
macro AlmGenericCmp(a, Ax) 
{
    value:5 = a;
    V = sborrow(value, Ax);
    VL = VL || V;
    value = value - Ax;
    SetAccFlag(value);
}
macro AlmGenericSub(a, Ax) 
{
    value:5 = a;
    V = sborrow(value, Ax);
    VL = VL || V;
    value = value - Ax;
    SatAndSetAccAndFlag(Ax, value);
}
macro AlmGenericMsu(a, Ax) 
{
}
macro AlmGenericSqr(a) 
{
    x0 = a;
    y0 = a;
    DoMultiplication_unit0(1,1);
}
macro AlmGenericSqra() {}
# <<< ALM normal >>>
# 0xA000 0x1FFF    alm At<Alm, 9>,At<MemImm8, 0>,At<Ax, 8>,
with : op_1315=0x5 
{
    :alm_or    MemImm8_0,Ax_8    is Alm_9=0x0 & MemImm8_0 & Ax_8 
    {
        AlmGenericOr(zext(MemImm8_0), Ax_8);
    }
    :alm_and    MemImm8_0,Ax_8    is Alm_9=0x1 & MemImm8_0 & Ax_8 
    {
        AlmGenericAnd(zext(MemImm8_0), Ax_8);
    }
    :alm_xor    MemImm8_0,Ax_8    is Alm_9=0x2 & MemImm8_0 & Ax_8 
    {
        AlmGenericXor(zext(MemImm8_0), Ax_8);
    }
    :alm_add    MemImm8_0,Ax_8    is Alm_9=0x3 & MemImm8_0 & Ax_8 
    {
        AlmGenericAdd(sext(MemImm8_0), Ax_8);
    }
    :alm_tst0    MemImm8_0,Ax_8    is Alm_9=0x4 & MemImm8_0 & Ax_8 
    {
        AlmGenericTst0(MemImm8_0, Ax_8);
    }
    :alm_tst1    MemImm8_0,Ax_8    is Alm_9=0x5 & MemImm8_0 & Ax_8 
    {
        AlmGenericTst1(MemImm8_0, Ax_8);
    }
    :alm_cmp    MemImm8_0,Ax_8    is Alm_9=0x6 & MemImm8_0 & Ax_8 
    {
        AlmGenericCmp(sext(MemImm8_0), Ax_8);
    }
    :alm_sub    MemImm8_0,Ax_8    is Alm_9=0x7 & MemImm8_0 & Ax_8 
    {
        AlmGenericSub(sext(MemImm8_0), Ax_8);
    }
    :alm_msu    MemImm8_0,Ax_8    is Alm_9=0x8 & MemImm8_0 & Ax_8 & ProductToBus40p0
    {
        AlmGenericSub(ProductToBus40p0,Ax_8);
        x0 = MemImm8_0:2;
        DoMultiplication_unit0(1,1);
    }
    :alm_addh    MemImm8_0,Ax_8    is Alm_9=0x9 & MemImm8_0 & Ax_8 
    {
        local MemImm8h:5 = sext(MemImm8_0) << 16;
        AlmGenericAdd(MemImm8h, Ax_8);
    }
    :alm_addl    MemImm8_0,Ax_8    is Alm_9=0xA & MemImm8_0 & Ax_8 
    {
        AlmGenericAdd(zext(MemImm8_0), Ax_8);
    }
    :alm_subh    MemImm8_0,Ax_8    is Alm_9=0xB & MemImm8_0 & Ax_8 
    {
        local MemImm8h:5 = sext(MemImm8_0) << 16;
        AlmGenericSub(MemImm8h, Ax_8);
    }
    :alm_subl    MemImm8_0,Ax_8    is Alm_9=0xC & MemImm8_0 & Ax_8
    {
        AlmGenericSub(zext(MemImm8_0), Ax_8);
    }
    :alm_sqr    MemImm8_0,Ax_8    is Alm_9=0xD & MemImm8_0 & Ax_8 
    {
        AlmGenericSqr(MemImm8_0);
    }
    :alm_sqra    MemImm8_0,Ax_8    is Alm_9=0xE & MemImm8_0 & Ax_8 & ProductToBus40p0
    {
        AlmGenericAdd(ProductToBus40p0,Ax_8);
        AlmGenericSqr(MemImm8_0);
    }
    :alm_cmpu    MemImm8_0,Ax_8    is Alm_9=0xF & MemImm8_0 & Ax_8 
    {
        AlmGenericCmp(zext(MemImm8_0), Ax_8);
    }
}

# 0x8080 0x1F1F    alm At<Alm, 9>,At<Rn, 0>,At<StepZIDS, 3>,At<Ax, 8>,
:alm    Alm_9,Rn_0,StepZIDS_3,Ax_8    is Alm_9 & Rn_0 & StepZIDS_3 & Ax_8 & op_0507=0x4 & op_1315=0x4 unimpl

# 0x80A0 0x1F1F    alm At<Alm, 9>,At<Register, 0>,At<Ax, 8>,
with :op_0507=0x5 & op_1315=0x4
{
    :alm_or    Register_0,Ax_8    is Alm_9=0x0 & Register_0 & Ax_8 
    {
        AlmGenericOr(zext(Register_0), Ax_8);
    }
    :alm_and    Register_0,Ax_8    is Alm_9=0x1 & Register_0 & Ax_8 
    {
        AlmGenericAnd(zext(Register_0), Ax_8);
    }
    :alm_xor    Register_0,Ax_8    is Alm_9=0x2 & Register_0 & Ax_8 
    {
        AlmGenericXor(zext(Register_0), Ax_8);
    }
    with: Alm_9=0x3
    {
        :alm_add    Register_0,Ax_8    is Register_0 & Ax_8 
        {
            AlmGenericAdd(sext(Register_0), Ax_8);
        }
        :alm_add    RegisterAx_0,Ax_8    is RegisterAx_0 & Ax_8 
        {
            AlmGenericAdd(sext(RegisterAx_0), Ax_8);
        }
    }
    :alm_tst0    Register_0,Ax_8    is Alm_9=0x4 & Register_0 & Ax_8 
    {
        local tmp:2 = Register_0 & Ax_8:2;
        Z = tmp == 0;
    }
    :alm_tst1    Register_0,Ax_8    is Alm_9=0x5 & Register_0 & Ax_8 
    {
        local tmp:2 = Register_0:2 & ~Ax_8:2;
        Z = tmp == 0;
    }
    :alm_cmp    Register_0,Ax_8    is Alm_9=0x6 & Register_0 & Ax_8 
    {
        AlmGenericCmp(sext(Register_0), Ax_8);
    }
    :alm_sub    Register_0,Ax_8    is Alm_9=0x7 & Register_0 & Ax_8 
    {
        AlmGenericSub(sext(Register_0), Ax_8);
    }
    :alm_msu    Register_0,Ax_8    is Alm_9=0x8 & Register_0 & Ax_8 & ProductToBus40p0
    {
        AlmGenericSub(ProductToBus40p0,Ax_8);
        x0 = Register_0:2;
        DoMultiplication_unit0(1,1);
    }
    :alm_addh    Register_0,Ax_8    is Alm_9=0x9 & Register_0 & Ax_8 
    {
        local Register_0h:5 = sext(Register_0) << 16;
        AlmGenericAdd(Register_0h, Ax_8);
    }
    :alm_addl    Register_0,Ax_8    is Alm_9=0xA & Register_0 & Ax_8 
    {
        AlmGenericAdd(zext(Register_0), Ax_8);
    }
    :alm_subh    Register_0,Ax_8    is Alm_9=0xB & Register_0 & Ax_8 
    {
        local Register_0h:5 = sext(Register_0) << 16;
        AlmGenericSub(Register_0h, Ax_8);
    }
    :alm_subl    Register_0,Ax_8    is Alm_9=0xC & Register_0 & Ax_8
    {
        AlmGenericSub(zext(Register_0), Ax_8);
    }
    :alm_sqr    Register_0,Ax_8    is Alm_9=0xD & Register_0 & Ax_8
    {
        AlmGenericSqr(Register_0);
    }
    :alm_sqra    Register_0,Ax_8    is Alm_9=0xE & Register_0 & Ax_8 & ProductToBus40p0
    {
        AlmGenericAdd(ProductToBus40p0,Ax_8);
        AlmGenericSqr(Register_0);
    }
    :alm_cmpu    Register_0,Ax_8    is Alm_9=0xF & Register_0 & Ax_8 
    {
        AlmGenericCmp(zext(Register_0), Ax_8);
    }
}

# <<< ALM r6 >>>
# 0xD388 0x0010    alm_r6 Const<Alm, 0>,At<Ax, 4>,
:alm_or    r6,Ax_4    is r6 & Ax_4 & op_0003=0x8 & op_0515=0x69C 
{
    AlmGenericOr(zext(r6), Ax_4);
}

# 0xD389 0x0010    alm_r6 Const<Alm, 1>,At<Ax, 4>,
:alm_and    r6,Ax_4    is r6 & Ax_4 & op_0003=0x9 & op_0515=0x69C 
{
    AlmGenericAnd(zext(r6), Ax_4);
}

# 0xD38A 0x0010    alm_r6 Const<Alm, 2>,At<Ax, 4>,
:alm_xor     r6,Ax_4    is r6 & Ax_4 & op_0003=0xA & op_0515=0x69C 
{
    AlmGenericXor(zext(r6), Ax_4);
}

# 0xD38B 0x0010    alm_r6 Const<Alm, 3>,At<Ax, 4>,
:alm_add    r6,Ax_4    is r6 & Ax_4 & op_0003=0xB & op_0515=0x69C 
{
    AlmGenericAdd(sext(r6), Ax_4);
}

# 0xD38C 0x0010    alm_r6 Const<Alm, 4>,At<Ax, 4>,
:alm_tst0    r6,Ax_4    is r6 & Ax_4 & op_0003=0xC & op_0515=0x69C 
{
    AlmGenericTst0(r6, Ax_4);
}

# 0xD38D 0x0010    alm_r6 Const<Alm, 5>,At<Ax, 4>,
:alm_tst1    r6,Ax_4    is r6 & Ax_4 & op_0003=0xD & op_0515=0x69C 
{
    AlmGenericTst1(r6, Ax_4);
}

# 0xD38E 0x0010    alm_r6 Const<Alm, 6>,At<Ax, 4>,
:alm_cmp    r6,Ax_4    is r6 & Ax_4 & op_0003=0xE & op_0515=0x69C 
{
    AlmGenericCmp(sext(r6), Ax_4);
}

# 0xD38F 0x0010    alm_r6 Const<Alm, 7>,At<Ax, 4>,
:alm_sub    r6,Ax_4    is r6 & Ax_4 & op_0003=0xF & op_0515=0x69C 
{
    AlmGenericSub(sext(r6), Ax_4);
}

# 0x9462 0x0001    alm_r6 Const<Alm, 8>,At<Ax, 0>,
:alm_msu    r6,Ax_0    is r6 & Ax_0 & op_0115=0x4A31 & ProductToBus40p0
{
    AlmGenericSub(ProductToBus40p0,Ax_0);
    x0 = r6;
    DoMultiplication_unit0(1,1);
}

# 0x9464 0x0001    alm_r6 Const<Alm, 9>,At<Ax, 0>,
:alm_addh    r6,Ax_0    is r6 & Ax_0 & op_0115=0x4A32 
{
    local r6h:5 = sext(r6) << 16;
    AlmGenericAdd(r6h, Ax_0);
}

# 0x9466 0x0001    alm_r6 Const<Alm, 10>,At<Ax, 0>,
:alm_addl    r6,Ax_0    is r6 & Ax_0 & op_0115=0x4A33 
{
    AlmGenericAdd(zext(r6), Ax_0);
}

# 0x5E23 0x0100    alm_r6 Const<Alm, 11>,At<Ax, 8>,
:alm_subh    r6,Ax_8    is r6 & Ax_8 & op_0007=0x23 & op_0915=0x2F 
{
    local r6h:5 = sext(r6) << 16;
    AlmGenericSub(r6h, Ax_8);
}

# 0x5E22 0x0100    alm_r6 Const<Alm, 12>,At<Ax, 8>,
:alm_subl    r6,Ax_8    is r6 & Ax_8 & op_0007=0x22 & op_0915=0x2F 
{
    AlmGenericSub(zext(r6), Ax_8);
}

# 0x5F41 0x0000    alm_r6 Const<Alm, 13>,Const<Ax, 0>,
:alm_sqr    r6,a0    is r6 & a0 & op_0015=0x5F41 
{
    AlmGenericSqr(r6);
}

# 0x9062 0x0101    alm_r6 Const<Alm, 14>,At<Ax, 8>,Unused<0>,
:alm_sqra    r6,Ax_8    is r6 & Ax_8 & Unused_0 & op_0107=0x31 & op_0915=0x48 & ProductToBus40p0
{
    AlmGenericAdd(ProductToBus40p0,Ax_8);
    AlmGenericSqr(r6);
}

# 0x8A63 0x0008    alm_r6 Const<Alm, 15>,At<Ax, 3>,
:alm_cmpu    r6,Ax_3    is r6 & Ax_3 & op_0002=0x3 & op_0415=0x8A6 
{
    AlmGenericCmp(zext(r6), Ax_3);
}

# <<< ALU normal >>>
# using Alu = EnumOperand<AlmOp,
#     AlmOp::Or,
#     AlmOp::And,
#     AlmOp::Xor,
#     AlmOp::Add,

#     AlmOp::Reserved,
#     AlmOp::Reserved,
#     AlmOp::Cmp,
#     AlmOp::Sub
# >;

# 0xD4F8 0xFFFF0107    alu At<Alu, 0>,At<MemImm16, 16>,At<Ax, 8>,
:alu_or    MemImm16_16,Ax_8    is Alu_0=0x0 & Ax_8 & op_0307=0x1F & op_0915=0x6A ; MemImm16_16 
{
    AlmGenericOr(zext(MemImm16_16), Ax_8);
}
:alu_and    MemImm16_16,Ax_8    is Alu_0=0x1 & Ax_8 & op_0307=0x1F & op_0915=0x6A ; MemImm16_16 
{
    AlmGenericAnd(zext(MemImm16_16), Ax_8);
}
:alu_xor    MemImm16_16,Ax_8    is Alu_0=0x2 & Ax_8 & op_0307=0x1F & op_0915=0x6A ; MemImm16_16 
{
    AlmGenericXor(zext(MemImm16_16), Ax_8);
}
:alu_add    MemImm16_16,Ax_8    is Alu_0=0x3 & Ax_8 & op_0307=0x1F & op_0915=0x6A ; MemImm16_16
{
    AlmGenericAdd(sext(MemImm16_16), Ax_8);
}
:alu_cmp    MemImm16_16,Ax_8    is Alu_0=0x6 & Ax_8 & op_0307=0x1F & op_0915=0x6A ; MemImm16_16 
{
    AlmGenericCmp(sext(MemImm16_16), Ax_8);
}
:alu_sub    MemImm16_16,Ax_8    is Alu_0=0x7 & Ax_8 & op_0307=0x1F & op_0915=0x6A ; MemImm16_16 
{
    AlmGenericSub(sext(MemImm16_16), Ax_8);
}

# 0xD4D8 0xFFFF0107    alu At<Alu, 0>,At<MemR7Imm16, 16>,At<Ax, 8>,
:alu_or    MemR7Imm16_16,Ax_8    is Alu_0=0x0 & Ax_8 & op_0307=0x1B & op_0915=0x6A ; MemR7Imm16_16 
{
    AlmGenericOr(zext(MemR7Imm16_16), Ax_8);
}
:alu_and    MemR7Imm16_16,Ax_8    is Alu_0=0x1 & Ax_8 & op_0307=0x1B & op_0915=0x6A ; MemR7Imm16_16 
{
    AlmGenericAnd(zext(MemR7Imm16_16), Ax_8);
}
:alu_xor    MemR7Imm16_16,Ax_8    is Alu_0=0x2 & Ax_8 & op_0307=0x1B & op_0915=0x6A ; MemR7Imm16_16 
{
    AlmGenericXor(zext(MemR7Imm16_16), Ax_8);
}
:alu_add    MemR7Imm16_16,Ax_8    is Alu_0=0x3 & Ax_8 & op_0307=0x1B & op_0915=0x6A ; MemR7Imm16_16 
{
    AlmGenericAdd(sext(MemR7Imm16_16), Ax_8);
}
:alu_cmp    MemR7Imm16_16,Ax_8    is Alu_0=0x6 & Ax_8 & op_0307=0x1B & op_0915=0x6A ; MemR7Imm16_16 
{
    AlmGenericCmp(sext(MemR7Imm16_16), Ax_8);
}
:alu_sub    MemR7Imm16_16,Ax_8    is Alu_0=0x7 & Ax_8 & op_0307=0x1B & op_0915=0x6A ; MemR7Imm16_16 
{
    AlmGenericSub(sext(MemR7Imm16_16), Ax_8);
}

# 0x80C0 0xFFFF0F00    alu At<Alu, 9>,At<Imm16, 16>,At<Ax, 8>,
:alu_or    Imm16_16,Ax_8    is Alu_9=0 & Ax_8 & op_0007=0xC0 & op_1215=0x8 ; Imm16_16
{
    local Imm16:2 = Imm16_16;
    Ax_8 = zext(Imm16) | Ax_8;
    SetAccFlag(Ax_8);
}
:alu    Alu_9,Imm16_16,Ax_8    is Alu_9 & Ax_8 & op_0007=0xC0 & op_1215=0x8 ; Imm16_16 unimpl

# 0xC000 0x0FFF    alu At<Alu, 9>,At<Imm8, 0>,At<Ax, 8>,
:alu    Alu_9,Imm8_0,Ax_8    is Alu_9 & Imm8_0 & Ax_8 & op_1215=0xC unimpl

# 0x4000 0x0F7F    alu At<Alu, 9>,At<MemR7Imm7s, 0>,At<Ax, 8>,
:alu    Alu_9,MemR7Imm7s_0,Ax_8    is Alu_9 & MemR7Imm7s_0 & Ax_8 & op_0707=0x0 & op_1215=0x4 unimpl
